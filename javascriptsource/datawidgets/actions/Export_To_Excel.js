// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";
import ExcelJS from "exceljs";
import { saveAs } from "file-saver";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} datagridName - The name given to the Datagrid2 widget.
 * @param {string} fileName - The name of the excel file generated in the export.
 * @param {boolean} showHeaderColumns - The field to select if the header columns are visible or not on the exported excel file.
 * @returns {Promise.<void>}
 */
export async function Export_To_Excel(datagridName, fileName, showHeaderColumns) {
	// BEGIN USER CODE
	if (!fileName || !datagridName) {
		return;
	}

	const DATAGRID_DATA_EXPORT = "com.mendix.widgets.web.datagrid.export";
	const stream = window[DATAGRID_DATA_EXPORT][datagridName].create();
    const workbook = new ExcelJS.Workbook();
	const sheet = workbook.addWorksheet();
    
    stream.process((msg) => {
        if (!msg) {
            return;
        }

        switch (msg.type) {
            case "columns":
                if (showHeaderColumns) {
					sheet.columns = msg.payload.map(column => {
						return {
							header: `${column.name}`,
							key: column.name.toLowerCase(),
							width: 25,
						};
					})
                }
                break;
            case "data":
                msg.payload.forEach(item => sheet.addRow(item));
                break;
            case "end":
                workbook.xlsx.writeBuffer().then(data => {
					const blob = new Blob([data], {
						type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
					});
					saveAs(blob, `${fileName}.xlsx`);

				})
                break;
        }
    });

    stream.start();
	// END USER CODE
}
